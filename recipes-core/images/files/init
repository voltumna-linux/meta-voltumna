#!/bin/sh

PATH=/sbin:/bin:/usr/sbin:/usr/bin

do_reboot() {
	if [ -z "${debug}" ]; then
		echo -n "Rebooting in 10 sec. "
		sleep 10
		reboot -f
	fi
}

do_umount_and_reboot() {
	umount -a 2>/dev/null
	do_reboot
}

# Mounting proc filesystem
mount -n -t proc none /proc || do_reboot

# Symlinking mtab to make "umount -a" works
ln -s /proc/self/mounts /etc/mtab

# Mounting dev filesystem
mount -t devtmpfs none /dev || do_umount_and_reboot

# Mounting sys filesystem
mount -t sysfs none /sys || do_umount_and_reboot

# Parse command line options
for arg in $(cat /proc/cmdline)
do
	case $arg in
		*fstab=* | nfsroot=* | rootwait )
					echo "The $arg parameter is ignored...";;
		debug)			export debug=true
					set -x;;
		break=*)		export break="${arg//break=}";;
		ip=*)			export network=true
					for idx in $(seq 1 10); do
						param=$(echo "${arg//ip=}" | cut -d":" -f${idx})
						case $idx in
							1)  export ip="${param}";;
							2)  export siaddr="${param}";;
							3)  export router="${param}";;
							4)  export mask="${param}";;
							5)  export hostname="${param}";;
							6)  export interface="${param}";;
							7)  export autoconf="${param}";;
							8)  export dns1="${param}";;
							9)  export dns2="${param}";;
							10) export ntp="${param}";;
						esac
					done;;
		root=*)			export rootpath="${arg//root=}";;
		rootfstype=*)		export rootfstype="${arg//rootfstype=}";;
		rootflags=*)		export rootflags="${arg//rootflags=}";;
		mount.usr=*)		export usrpath="${arg//mount.usr=}";;
		mount.usrfstype=*)	export usrfstype="${arg//mount.usrfstype=}";;
		mount.usrflags=*)	export usrflags="${arg//mount.usrflags=}";;
		systemd.volatile=*)	echo "The $arg paramter is not implemented yet...";;
	esac
done

# The usrfstype/flags defaults are the same of the root's ones
if [ -z "${usrfstype}" ]; then
	usrfstype=${rootfstype}
fi

if [ -z "${usrflags}" ]; then
	usrflags=${rootflags}
fi

# Drop into a shell...
if [ "${break}" = "top" ]; then
	sh
fi

# Retrieve parameters from network if it is the case...
if [ -n "${network}" ]; then
	if [ -z "${interface}" ]; then
		echo -n "Fail to retrieve interface! "
		do_umount_reboot
	fi

	ip link set "${interface}" up
	counter=0
	while [ "$(cat /sys/class/net/${interface}/operstate)" != "up" ]
	do
		counter=$(($counter+1))
		sleep 1
		if [ "$counter" -gt 60 ]; then
			echo -n "Fail to bring up interface! "
			do_umount_and_reboot
		fi
	done

	if [ "${autoconf}" = "dhcp" ]; then
		eval $(udhcpc -n -q -i eth0 -O rootpath -O usrpath -s /etc/udhcpc.d/60elettra 2>/dev/null)
	fi

	ip addr add ${ip}/${mask} dev ${interface}
	if [ "$?" -ne 0 ]; then
		echo -n "Fail to configure interface! "
		do_umount_reboot
	fi
	ip route add default via ${router} dev ${interface}
fi

# Drop into a shell...
if [ "${break}" = "middle" ]; then
	sh
fi

# Check mandatory parameters...
if [ -z "${rootfstype}" -o -z "${rootpath}" -o -z "${usrpath}" ]; then
	echo -n "Missing rootfstype and/or root(path) parameters! "; do_umount_and_reboot
fi

# Mount rootpath...
case $rootfstype in
	nfs)	mount -t ${rootfstype} ${siaddr}:${rootpath} /mnt/rootfs -o noatime,nolock,ro;;
	*)	counter=0
		while [ ! -b "${rootpath}" ]; do
			counter=$(($counter+1))
			sleep 1
			if [ "$counter" -gt 60 ]; then
				echo -n "Fail to wait root! "
				do_umount_and_reboot
			fi
		done
		mount -t ${rootfstype} ${rootpath} /mnt/rootfs -o noatime,ro;;
esac
if [ "$?" -ne 0 ]; then
	echo -n "Fail to mount root(path)! "
	do_umount_reboot
fi

# Mount usrpath (if necessary)...
case $usrfstype in
	nfs)	mount -t ${usrfstype} ${siaddr}:${usrpath} /mnt/rootfs/usr -o noatime,nolock,ro;;
	*)	mount -t ${usrfstype} /mnt/rootfs/${usrpath} /mnt/rootfs/usr -o noatime,bind,ro;;
esac
if [ "$?" -ne 0 ]; then
	echo -n "Fail to mount usr(path)! "
	do_umount_and_reboot
fi

# Remount usrpath
mount /mnt/rootfs/usr -o remount,${usrflags};
if [ "$?" -ne 0 ]; then
	echo -n "Fail to remount usr(path) with user defined flags! "
	do_umount_and_reboot
fi

# Remount rootpath
mount /mnt/rootfs/ -o remount,${rootflags},rw;
if [ "$?" -ne 0 ]; then
	echo -n "Fail to remount root(path) with user defined flags! "
	do_umount_and_reboot
fi

# Drop into a shell...
if [ "${break}" = "bottom" ]; then
	sh
fi

exec switch_root /mnt/rootfs /sbin/init
