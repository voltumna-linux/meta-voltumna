From 1e1f8f06a83dc365c209b591b4d11620eea66abb Mon Sep 17 00:00:00 2001
From: Alessio Igor Bogani <alessio.bogani@elettra.eu>
Date: Mon, 6 Jun 2022 13:18:48 +0200
Subject: [PATCH 6/9] Add commented code of the interrupt handlers for IRQ9 and
 IRQ10

---
 arch/powerpc/boot/dts/fsl/mvme2500.dts |  2 +-
 arch/powerpc/platforms/85xx/mvme2500.c | 80 ++++++++++++++++++++++++++
 2 files changed, 81 insertions(+), 1 deletion(-)

diff --git a/arch/powerpc/boot/dts/fsl/mvme2500.dts b/arch/powerpc/boot/dts/fsl/mvme2500.dts
index 165a93e029e3..54e74cd93a5c 100644
--- a/arch/powerpc/boot/dts/fsl/mvme2500.dts
+++ b/arch/powerpc/boot/dts/fsl/mvme2500.dts
@@ -200,12 +200,12 @@
 		board-control@5,0 {
 			compatible = "artesyn,mvme2500-fpga";
 			reg = <0x5 0x0 0x01000>;
+			interrupts = <9 1 0 0>, <10 1 0 0>;
 		};
 
 		cpld@6,0 {
 			compatible = "artesyn,mvme2500-cpld";
 			reg = <0x6 0x0 0x10000>;
-			interrupts = <9 1 0 0>;
 		};
 	};
 
diff --git a/arch/powerpc/platforms/85xx/mvme2500.c b/arch/powerpc/platforms/85xx/mvme2500.c
index 69d5aa082a4b..b8cce6f528c9 100644
--- a/arch/powerpc/platforms/85xx/mvme2500.c
+++ b/arch/powerpc/platforms/85xx/mvme2500.c
@@ -14,6 +14,9 @@
  */
 
 #include <linux/pci.h>
+#if 0
+#include <linux/interrupt.h>
+#endif
 #include <asm/udbg.h>
 #include <asm/mpic.h>
 #include <sysdev/fsl_soc.h>
@@ -21,6 +24,14 @@
 
 #include "mpc85xx.h"
 
+#if 0
+#define MVME2500_INTERRUPT_REG_GPIO02_OFFSET	0x95
+#define MVME2500_ABORT_MASK			0x8
+
+static void __iomem *mvme2500_fpga;
+static int irq_abort, irq_power_interruption;
+#endif
+
 void __init mvme2500_pic_init(void)
 {
 	struct mpic *mpic = mpic_alloc(NULL, 0,
@@ -51,6 +62,75 @@ static int __init mvme2500_probe(void)
 	return of_machine_is_compatible("artesyn,MVME2500");
 }
 
+#if 0
+static irqreturn_t abort_timer_isr(int irq, void *context)
+{
+	u8 reg;
+
+	reg = readb(mvme2500_fpga + MVME2500_INTERRUPT_REG_GPIO02_OFFSET);
+
+	if (reg & MVME2500_ABORT_MASK) {
+		printk(KERN_INFO "Requested (soft) abort\n");
+		return IRQ_HANDLED;
+	}
+
+	return IRQ_NONE;
+}
+
+static irqreturn_t power_interruption_isr(int irq, void *context)
+{
+	printk(KERN_ERR "Power interruption!\n");
+	return IRQ_HANDLED;
+};
+
+static int mvme2500_setup_additional_irqs(void)
+{
+	struct device_node *np;
+	int rc;
+
+	np = of_find_compatible_node(NULL, NULL, "artesyn,mvme2500-fpga");
+	if (np == NULL) {
+		pr_err("Missing mvme2500-fpga node\n");
+		return -ENOENT;
+	}
+
+	mvme2500_fpga = of_iomap(np, 0);
+	of_node_put(np);
+	if (mvme2500_fpga == NULL) {
+		pr_err("Unable to map mvme2500-fpga io memory\n");
+		return -ENOENT;
+	}
+
+	irq_abort = irq_of_parse_and_map(np, 0);
+	if (irq_abort  == NO_IRQ) {
+		pr_err("Fail to parse (soft) abort interrupt\n");
+		return -ENOENT;
+	}
+
+	rc = request_irq(irq_abort, abort_timer_isr, IRQF_TRIGGER_LOW,
+			"abort", NULL);
+	if (rc) {
+		pr_err("Unable to obtain (soft) abort interrupt!\n");
+		return -ENOENT;
+	}
+
+	irq_power_interruption = irq_of_parse_and_map(np, 1);
+	if (irq_power_interruption  == NO_IRQ) {
+		pr_err("Fail to parse power interruption interrupt\n");
+		return -ENOENT;
+	}
+
+	rc = request_irq(irq_power_interruption, power_interruption_isr,
+			IRQF_TRIGGER_LOW, "power-interruption", NULL);
+	if (rc) {
+		pr_err("Unable to obtain power interruption interrupt!\n");
+		return -ENOENT;
+	}
+
+	return 0;
+}
+machine_late_initcall(mvme2500, mvme2500_setup_additional_irqs);
+#endif
 define_machine(mvme2500) {
 	.name			= "MVME2500",
 	.probe			= mvme2500_probe,
-- 
2.24.4

