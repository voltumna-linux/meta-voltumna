From de717aba17f6794ef9cd22faafb4f30cf13b92c8 Mon Sep 17 00:00:00 2001
From: Ramesh Garidapuri <ramesh.garidapuri@amd.com>
Date: Thu, 14 Sep 2023 12:52:07 +0530
Subject: [PATCH 12/31] amd-xgbe: Custom initialization of Marvell PHY on Bilby

Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
Signed-off-by: rgaridap <Ramesh.Garidapuri@amd.com>
Signed-off-by: rgaridap <Ramesh.Garidapuri@amd.com>
Change-Id: I8ce77ba91f5e095a100acb267309b66c24cc5e41
---
 drivers/net/ethernet/amd/xgbe/xgbe-drv.c    |  3 +
 drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c | 67 ++++++++++++++++++---
 drivers/net/ethernet/amd/xgbe/xgbe.h        |  1 +
 3 files changed, 63 insertions(+), 8 deletions(-)
 mode change 100644 => 100755 drivers/net/ethernet/amd/xgbe/xgbe-drv.c
 mode change 100644 => 100755 drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
 mode change 100644 => 100755 drivers/net/ethernet/amd/xgbe/xgbe.h

diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
old mode 100644
new mode 100755
index 0583cd67e916..277b868d98d6
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@ -1301,6 +1301,8 @@ static int xgbe_start(struct xgbe_prv_data *pdata)
 	unsigned int i;
 	int ret;
 
+	pdata->ext_fixed_phy = 0;
+
 	/* Set the number of queues */
 	ret = netif_set_real_num_tx_queues(netdev, pdata->tx_ring_count);
 	if (ret) {
@@ -1372,6 +1374,7 @@ static void xgbe_stop(struct xgbe_prv_data *pdata)
 	if (test_bit(XGBE_STOPPED, &pdata->dev_state))
 		return;
 
+	pdata->ext_fixed_phy = 0;
 	netif_tx_stop_all_queues(netdev);
 	netif_carrier_off(pdata->netdev);
 
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c b/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
old mode 100644
new mode 100755
index f163c0822192..9701003af9bb
--- a/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-phy-v2.c
@@ -854,10 +854,12 @@ static void xgbe_phy_free_phy_device(struct xgbe_prv_data *pdata)
 	struct xgbe_phy_data *phy_data = pdata->phy_data;
 
 	if (phy_data->phydev) {
-		phy_detach(phy_data->phydev);
-		phy_device_remove(phy_data->phydev);
-		phy_device_free(phy_data->phydev);
-		phy_data->phydev = NULL;
+		if(!pdata->ext_fixed_phy) {
+			phy_detach(phy_data->phydev);
+			phy_device_remove(phy_data->phydev);
+			phy_device_free(phy_data->phydev);
+			phy_data->phydev = NULL;
+		}
 	}
 }
 
@@ -1006,6 +1008,36 @@ static int xgbe_phy_find_phy_device(struct xgbe_prv_data *pdata)
 	/* Clear the extra AN flag */
 	pdata->an_again = 0;
 
+	netif_dbg(pdata, drv, pdata->netdev, "xgbe portmode = %d, phy_mode = %d, con_type= %d\n", phy_data->port_mode,phy_data->phydev_mode,phy_data->conn_type);
+
+	/* Check for the presence of an external PHY in KR mode, example Bilby platform */
+	if(phy_data->port_mode == XGBE_PORT_MODE_BACKPLANE) {
+		int addr = 0;
+		int reg = MII_ADDR_C45 | 1 << 16 | 2;
+		enum xgbe_conn_type  conn_type = phy_data->conn_type;
+		enum xgbe_mdio_mode  phy_mode = phy_data->phydev_mode;
+
+		pdata->ext_fixed_phy = 0;
+		phy_data->phydev_mode = XGBE_MDIO_MODE_CL45;
+		phy_data->conn_type = XGBE_CONN_TYPE_MDIO;
+
+		ret = xgbe_phy_get_comm_ownership(pdata);
+		if(ret) {
+			return ret;
+		}
+		ret = xgbe_phy_mdio_mii_read(pdata, addr, reg);
+		/* for Marvell PHY on bilby this is 0x2b , this is a workaround for Bilby , issue EMBDEV-10275*/ 
+		if((ret & 0x1FFF) == 0x2b){
+			pdata->ext_fixed_phy = 1;
+		}
+		xgbe_phy_put_comm_ownership(pdata);
+
+		if(!pdata->ext_fixed_phy) {
+			phy_data->phydev_mode = phy_mode;
+			phy_data->conn_type = conn_type;
+		}
+	}
+
 	/* Check for the use of an external PHY */
 	if (phy_data->phydev_mode == XGBE_MDIO_MODE_NONE)
 		return 0;
@@ -1033,8 +1065,12 @@ static int xgbe_phy_find_phy_device(struct xgbe_prv_data *pdata)
 		return -ENODEV;
 	}
 	netif_dbg(pdata, drv, pdata->netdev, "external PHY id is %#010x\n",
-		  phydev->phy_id);
-
+			(phy_data->phydev_mode == XGBE_MDIO_MODE_CL45) ? phydev->c45_ids.device_ids[MDIO_MMD_PMAPMD] : phydev->phy_id);
+	if(((phy_data->phydev_mode == XGBE_MDIO_MODE_CL45) ? phydev->c45_ids.device_ids[MDIO_MMD_PMAPMD] : phydev->phy_id) == 0xFFFFFFFF) {
+		pdata->ext_fixed_phy = 0;
+		phy_device_free(phydev);
+		return 0;
+	}
 	/*TODO: If c45, add request_module based on one of the MMD ids? */
 
 	ret = phy_device_register(phydev);
@@ -1045,7 +1081,7 @@ static int xgbe_phy_find_phy_device(struct xgbe_prv_data *pdata)
 	}
 
 	ret = phy_attach_direct(pdata->netdev, phydev, phydev->dev_flags,
-				PHY_INTERFACE_MODE_SGMII);
+				(phy_data->phydev_mode == XGBE_PORT_MODE_BACKPLANE) ? PHY_INTERFACE_MODE_10GKR : PHY_INTERFACE_MODE_SGMII);
 	if (ret) {
 		netdev_err(pdata->netdev, "phy_attach_direct failed\n");
 		phy_device_remove(phydev);
@@ -1059,6 +1095,14 @@ static int xgbe_phy_find_phy_device(struct xgbe_prv_data *pdata)
 	linkmode_and(phydev->advertising, phydev->advertising,
 		     lks->link_modes.advertising);
 
+       if(phy_data->port_mode == XGBE_PORT_MODE_BACKPLANE) {
+       /* to do : add code to set the auto neg mode
+       phy_data->phydev->drv->config_aneg(phy_data->phydev);
+       phy_start_aneg() wornt work with Marvell PHY
+       */
+               return 0;
+       }
+
 	phy_start_aneg(phy_data->phydev);
 
 	return 0;
@@ -1876,6 +1920,13 @@ static int xgbe_phy_an_config(struct xgbe_prv_data *pdata)
 		phy_data->phydev->speed = pdata->phy.speed;
 		phy_data->phydev->duplex = pdata->phy.duplex;
 	}
+	if(phy_data->port_mode == XGBE_PORT_MODE_BACKPLANE) {
+		/* to do : add code to set the auto neg mode
+		   phy_data->phydev->drv->config_aneg(phy_data->phydev);
+		   phy_start_aneg() wornt work with Marvell PHY
+		   */
+		return 0;
+	}
 
 	ret = phy_start_aneg(phy_data->phydev);
 
@@ -3378,7 +3429,7 @@ static int xgbe_phy_reset(struct xgbe_prv_data *pdata)
 	xgbe_phy_power_off(pdata);
 	xgbe_phy_set_mode(pdata, cur_mode);
 
-	if (!phy_data->phydev)
+	if (!phy_data->phydev || !pdata->phy_started)
 		return 0;
 
 	/* Reset the external PHY */
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe.h b/drivers/net/ethernet/amd/xgbe/xgbe.h
old mode 100644
new mode 100755
index 4450011f4352..784db4299879
--- a/drivers/net/ethernet/amd/xgbe/xgbe.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe.h
@@ -1273,6 +1273,7 @@ struct xgbe_prv_data {
 	int mdio_mmd;
 	unsigned long link_check;
 	struct completion mdio_complete;
+	unsigned int ext_fixed_phy;
 
 	unsigned int kr_redrv;
 
-- 
2.34.1

