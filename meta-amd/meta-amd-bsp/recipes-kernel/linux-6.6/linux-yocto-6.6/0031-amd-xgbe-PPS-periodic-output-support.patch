diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-common.h b/drivers/net/ethernet/amd/xgbe/xgbe-common.h
index ad069bf02b97..1d936cdc13cf 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-common.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-common.h
@@ -332,7 +332,15 @@
 #define MAC_TSSR			0x0d20
 #define MAC_TXSNR			0x0d30
 #define MAC_TXSSR			0x0d34
-
+#define MAC_AUXCR			0x0d40
+#define MAC_ATSNR			0x0d48
+#define MAC_ATSSR			0x0d4C
+
+#define MAC_PPSCR			0x0d70
+#define MAC_PPSx_TTSR(x)		(0x0d80 + ((x) * 0x10))
+#define MAC_PPSx_TTNSR(x)		(0x0d84 + ((x) * 0x10))
+#define MAC_PPSx_INTERVAL(x)		(0x0d88 + ((x) * 0x10))
+#define MAC_PPSx_WIDTH(x)		(0x0d8C + ((x) * 0x10))
 #define MAC_QTFCR_INC			4
 #define MAC_MACA_INC			4
 #define MAC_HTR_INC			4
@@ -555,8 +563,29 @@
 #define MAC_TSCR_TXTSSTSM_WIDTH		1
 #define MAC_TSSR_TXTSC_INDEX		15
 #define MAC_TSSR_TXTSC_WIDTH		1
+#define MAC_TSSR_ATSSTN_INDEX		16 //Auxiliary Timestamp Snapshot Trigger Identifier.
+#define MAC_TSSR_ATSSTN_WIDTH		4
+
+#define MAC_TSSR_ATSNS_INDEX		25 //Number of Auxiliary Timestamp Snapshots.
+#define MAC_TSSR_ATSNS_WIDTH		5
+
+#define MAC_TSSR_ATSSTM_INDEX		24 //Auxiliary Timestamp Snapshot Trigger Missed.
+#define MAC_TSSR_ATSSTM_WIDTH		1
+
+#define MAC_TSSR_ATSSTN_INDEX		16 //Auxiliary Timestamp Snapshot Trigger Identifier.
+#define MAC_TSSR_ATSSTN_WIDTH		4
+#define MAC_TSSR_AUXTSTRIG_INDEX	2 //Auxiliary Timestamp Trigger Snapshot.
+#define MAC_TSSR_AUXTSTRIG_WIDTH	1
 #define MAC_TXSNR_TXTSSTSMIS_INDEX	31
 #define MAC_TXSNR_TXTSSTSMIS_WIDTH	1
+#define MAC_AUXCR_ATSEN3_INDEX		7
+#define MAC_AUXCR_ATSEN3_WIDTH		1
+#define MAC_AUXCR_ATSEN2_INDEX		6
+#define MAC_AUXCR_ATSEN2_WIDTH		1
+#define MAC_AUXCR_ATSEN1_INDEX		5
+#define MAC_AUXCR_ATSEN1_WIDTH		1
+#define MAC_AUXCR_ATSEN0_INDEX		4
+#define MAC_AUXCR_ATSEN0_WIDTH		1
 #define MAC_VLANHTR_VLHT_INDEX		0
 #define MAC_VLANHTR_VLHT_WIDTH		16
 #define MAC_VLANIR_VLTI_INDEX		20
@@ -589,6 +618,15 @@
 #define MAC_VR_USERVER_WIDTH		8
 
 /* MMC register offsets */
+#define MAC_PPSCR_PPSEN0_INDEX		4
+#define MAC_PPSCR_PPSEN0_WIDTH		1
+#define MAC_PPSCR_PPSCTRL0_INDEX	0
+#define MAC_PPSCR_PPSCTRL0_WIDTH	4
+#define MAC_PPSx_TTNSR_TRGTBUSY0_INDEX	31
+#define MAC_PPSx_TTNSR_TRGTBUSY0_WIDTH	1
+
+ /* MMC register offsets */
+
 #define MMC_CR				0x0800
 #define MMC_RISR			0x0804
 #define MMC_TISR			0x0808
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
index f393228d41c7..b7061e24e643 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
@@ -836,6 +836,65 @@ static int xgbe_set_speed(struct xgbe_prv_data *pdata, int speed)
 	return 0;
 }
 
+#define PPS_MAXIDX(x)                   ((((x) + 1) * 8) - 1)
+#define PPS_MINIDX(x)                   ((x) * 8)
+#define PPSx_MASK(x)                    GENMASK(PPS_MAXIDX(x), PPS_MINIDX(x))
+#define PPSCMDx(x, val)                 \
++        GENMASK(PPS_MINIDX(x) + 3, PPS_MINIDX(x)) & \
++        ((val) << PPS_MINIDX(x))
+#define PPSEN0                          BIT(4)
+#define TRGTMODSELx(x, val)             \
+        GENMASK(PPS_MAXIDX(x) - 1, PPS_MAXIDX(x) - 2) & \
+        ((val) << (PPS_MAXIDX(x) - 2))
+
+
+static int xgbe_pps_config(struct xgbe_prv_data *pdata, struct xgbe_pps_config *cfg, int index, int on)
+{
+	unsigned int value = 0;
+	unsigned int tnsec;
+	u64 period;
+
+	tnsec = XGMAC_IOREAD(pdata, MAC_PPSx_TTNSR(index));
+	if (XGMAC_GET_BITS(tnsec, MAC_PPSx_TTNSR, TRGTBUSY0))
+		return -EBUSY;
+
+	value = XGMAC_IOREAD(pdata, MAC_PPSCR);
+
+	value &= ~PPSx_MASK(index);
+
+	if (!on) {
+		value |= PPSCMDx(index, 0x5);
+		value |= PPSEN0;
+		XGMAC_IOWRITE(pdata, MAC_PPSCR, value);
+		return 0;
+	}
+
+	XGMAC_IOWRITE(pdata, MAC_PPSx_TTSR(index), cfg->start.tv_sec);
+	XGMAC_IOWRITE(pdata, MAC_PPSx_TTNSR(index), cfg->start.tv_nsec);
+
+	period = cfg->period.tv_sec * NSEC_PER_SEC;
+	period += cfg->period.tv_nsec;
+	do_div(period, XGBE_V2_TSTAMP_SSINC);
+
+	if (period <= 1)
+		return -EINVAL;
+
+	XGMAC_IOWRITE(pdata, MAC_PPSx_INTERVAL(index), period - 1);
+	period >>= 1;
+	if (period <= 1)
+		return -EINVAL;
+
+	XGMAC_IOWRITE(pdata, MAC_PPSx_WIDTH(index), period - 1);
+
+	value |= PPSCMDx(index, 0x2);
+	value |= TRGTMODSELx(index, 0x2);
+	value |= PPSEN0;
+
+	XGMAC_IOWRITE(pdata, MAC_PPSCR, value);
+	return 0;
+}
+
+
 static int xgbe_enable_rx_vlan_stripping(struct xgbe_prv_data *pdata)
 {
 	/* Put the VLAN tag in the Rx descriptor */
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
index fb81429050e4..6923d17a2432 100755
--- a/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-drv.c
@@ -480,8 +480,7 @@ static void xgbe_isr_task(struct tasklet_struct *t)
 	struct xgbe_channel *channel;
 	unsigned int dma_isr, dma_ch_isr;
 	unsigned int mac_isr, mac_tssr, mac_mdioisr;
-	unsigned int i;
-
+	unsigned int i, nauxtssnp;
 	/* The DMA interrupt status register also reports MAC and MTL
 	 * interrupts. So for polling mode, we just need to check for
 	 * this register to be non-zero
@@ -797,6 +796,7 @@ void xgbe_get_all_hw_features(struct xgbe_prv_data *pdata)
 	hw_feat->tx_ch_cnt    = XGMAC_GET_BITS(mac_hfr2, MAC_HWF2R, TXCHCNT);
 	hw_feat->pps_out_num  = XGMAC_GET_BITS(mac_hfr2, MAC_HWF2R, PPSOUTNUM);
 	hw_feat->aux_snap_num = XGMAC_GET_BITS(mac_hfr2, MAC_HWF2R, AUXSNAPNUM);
+	printk("%s pps_out_num  %u aux_snap_num %u\n", __func__, hw_feat->pps_out_num, hw_feat->aux_snap_num);7
 
 	/* Translate the Hash Table size into actual number */
 	switch (hw_feat->hash_table_size) {
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c b/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c
index 7051bd7cf6dc..648a85070219 100644
--- a/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-ptp.c
@@ -207,17 +207,46 @@ static int xgbe_settime(struct ptp_clock_info *info,
 }
 
 static int xgbe_enable(struct ptp_clock_info *info,
-		       struct ptp_clock_request *request, int on)
+	struct ptp_clock_request *req, int on)
 {
-	return -EOPNOTSUPP;
+	struct xgbe_prv_data *pdata = container_of(info,
+			struct xgbe_prv_data,
+			ptp_clock_info);
+	struct xgbe_pps_config *pps_cfg;
+	unsigned long flags;
+	int ret;
+
+	switch (req->type) {
+		case PTP_CLK_REQ_PEROUT:
+			/* Reject requests with unsupported flags */
+			if (req->perout.flags)
+				return -EOPNOTSUPP;
+
+			pps_cfg = &pdata->pps[req->perout.index];
+
+			pps_cfg->start.tv_sec = req->perout.start.sec;
+			pps_cfg->start.tv_nsec = req->perout.start.nsec;
+			pps_cfg->period.tv_sec = req->perout.period.sec;
+			pps_cfg->period.tv_nsec = req->perout.period.nsec;
+
+			spin_lock_irqsave(&pdata->tstamp_lock, flags);
+			ret = pdata->hw_if.pps_config(pdata, pps_cfg, req->perout.index, on);
+			spin_unlock_irqrestore(&pdata->tstamp_lock, flags);
+			break;
+
+		case PTP_CLK_REQ_EXTTS:
+		case PTP_CLK_REQ_PPS:
+		default:
+			break;
+	}
+	dev_dbg(pdata->dev, "rq->type %d on %d\n", req->type, on);
+	return 0;
 }
 
 void xgbe_ptp_register(struct xgbe_prv_data *pdata)
 {
 	struct ptp_clock_info *info = &pdata->ptp_clock_info;
 	struct ptp_clock *clock;
-	struct cyclecounter *cc = &pdata->tstamp_cc;
-	u64 dividend;
 
 	snprintf(info->name, sizeof(info->name), "%s",
 		 netdev_name(pdata->netdev));
@@ -225,8 +254,10 @@ void xgbe_ptp_register(struct xgbe_prv_data *pdata)
 	info->max_adj = pdata->ptpclk_rate;
 	info->adjfine = xgbe_adjfine;
 	info->adjtime = xgbe_adjtime;
-	info->gettime64 = xgbe_gettime;
+	info->gettimex64 = xgbe_gettimex;
 	info->settime64 = xgbe_settime;
+	info->n_per_out = pdata->hw_feat.pps_out_num;
+	info->n_ext_ts = pdata->hw_feat.aux_snap_num;
 	info->enable = xgbe_enable;
 
 	clock = ptp_clock_register(info, pdata->dev);
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe.h b/drivers/net/ethernet/amd/xgbe/xgbe.h
index 6296173701b9..11df8e463c2f 100755
--- a/drivers/net/ethernet/amd/xgbe/xgbe.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe.h
@@ -757,6 +757,12 @@ struct xgbe_ext_stats {
 	u64 rx_vxlan_csum_errors;
 };
 
+struct xgbe_pps_config {
+        bool available;
+        struct timespec64 start;
+        struct timespec64 period;
+};
+
 struct xgbe_hw_if {
 	int (*tx_complete)(struct xgbe_ring_desc *);
 
@@ -846,6 +852,10 @@ struct xgbe_hw_if {
 				unsigned int nsec);
 	u64 (*get_tstamp_time)(struct xgbe_prv_data *);
 	u64 (*get_tx_tstamp)(struct xgbe_prv_data *);
+	u64 (*get_aux_snp)(struct xgbe_prv_data *);
+	u64 (*feature_enable)(struct xgbe_prv_data *);
+	int (*pps_config)(struct xgbe_prv_data *, struct xgbe_pps_config *, int index, int on);
+
 
 	/* For Data Center Bridging config */
 	void (*config_tc)(struct xgbe_prv_data *);
@@ -1232,6 +1242,8 @@ struct xgbe_prv_data {
 	struct work_struct tx_tstamp_work;
 	struct sk_buff *tx_tstamp_skb;
 	u64 tx_tstamp;
+	/* Pulse Per Second output */
+	struct xgbe_pps_config pps[4];
 
 	/* DCB support */
 	struct ieee_ets *ets;
