From d997ee70a49cee8a577a81968c1d603a97bc614f Mon Sep 17 00:00:00 2001
From: Anuj Mittal <anuj.mittal@intel.com>
Date: Thu, 7 Apr 2022 21:39:26 +0800
Subject: [PATCH] Use system installed dependencies

Use the system versions of libva, ade and zlib.

Upstream-Status: Inappropriate
Signed-off-by: Anuj Mittal <anuj.mittal@intel.com>
---
 cmake/dependencies.cmake              | 20 --------------------
 cmake/extra_modules.cmake             |  4 ++--
 src/plugins/intel_gpu/include/va/va.h |  6 ------
 tests/fuzz/src/CMakeLists.txt         |  3 +--
 thirdparty/CMakeLists.txt             | 26 ++++++++++----------------
 thirdparty/cnpy/CMakeLists.txt        |  2 +-
 6 files changed, 14 insertions(+), 47 deletions(-)
 delete mode 100644 src/plugins/intel_gpu/include/va/va.h

diff --git a/cmake/dependencies.cmake b/cmake/dependencies.cmake
index 106af36c7d..45a3214100 100644
--- a/cmake/dependencies.cmake
+++ b/cmake/dependencies.cmake
@@ -27,26 +27,6 @@ get_linux_name(LINUX_OS_NAME)
 
 if(CMAKE_CROSSCOMPILING AND CMAKE_HOST_SYSTEM_NAME MATCHES Linux AND CMAKE_HOST_SYSTEM_PROCESSOR MATCHES "amd64.*|x86_64.*|AMD64.*")
     set(protoc_version "3.18.2")
-
-    RESOLVE_DEPENDENCY(SYSTEM_PROTOC_ROOT
-        ARCHIVE_LIN "protoc-${protoc_version}-linux-x86_64.tar.gz"
-        TARGET_PATH "${TEMP}/protoc-${protoc_version}-linux-x86_64"
-        SHA256 "42fde2b6044c1f74c7e86d4e03b43aac87128ddf57ac6ed8c4eab7a1e21bbf21"
-    )
-    debug_message(STATUS "host protoc-${protoc_version} root path = " ${SYSTEM_PROTOC_ROOT})
-
-    reset_deps_cache(SYSTEM_PROTOC)
-
-    find_host_program(
-        SYSTEM_PROTOC
-        NAMES protoc
-        PATHS "${SYSTEM_PROTOC_ROOT}/bin"
-        NO_DEFAULT_PATH)
-    if(NOT SYSTEM_PROTOC)
-        message(FATAL_ERROR "[ONNX IMPORTER] Missing host protoc binary")
-    endif()
-
-    update_deps_cache(SYSTEM_PROTOC "${SYSTEM_PROTOC}" "Path to host protoc for ONNX Importer")
 endif()
 
 if(ENABLE_INTEL_MYRIAD)
diff --git a/cmake/extra_modules.cmake b/cmake/extra_modules.cmake
index e33e4378f1..f0cacdf6ff 100644
--- a/cmake/extra_modules.cmake
+++ b/cmake/extra_modules.cmake
@@ -18,7 +18,7 @@ function(ie_generate_dev_package_config)
     configure_package_config_file("${OpenVINO_SOURCE_DIR}/cmake/templates/InferenceEngineDeveloperPackageConfig.cmake.in"
                                   "${CMAKE_BINARY_DIR}/InferenceEngineDeveloperPackageConfig.cmake"
                                   INSTALL_DESTINATION share # not used
-                                  PATH_VARS "OpenVINO_SOURCE_DIR;gflags_BINARY_DIR"
+                                  PATH_VARS "OpenVINO_SOURCE_DIR"
                                   NO_CHECK_REQUIRED_COMPONENTS_MACRO)
 
     configure_file("${OpenVINO_SOURCE_DIR}/cmake/templates/InferenceEngineConfig-version.cmake.in"
@@ -45,7 +45,7 @@ function(ov_generate_dev_package_config)
     configure_package_config_file("${OpenVINO_SOURCE_DIR}/cmake/templates/OpenVINODeveloperPackageConfig.cmake.in"
                                   "${CMAKE_BINARY_DIR}/OpenVINODeveloperPackageConfig.cmake"
                                   INSTALL_DESTINATION share # not used
-                                  PATH_VARS "OpenVINO_SOURCE_DIR;gflags_BINARY_DIR"
+                                  PATH_VARS "OpenVINO_SOURCE_DIR"
                                   NO_CHECK_REQUIRED_COMPONENTS_MACRO)
 
     configure_file("${OpenVINO_SOURCE_DIR}/cmake/templates/OpenVINOConfig-version.cmake.in"
diff --git a/src/plugins/intel_gpu/include/va/va.h b/src/plugins/intel_gpu/include/va/va.h
deleted file mode 100644
index 5c8a5c6f6e..0000000000
--- a/src/plugins/intel_gpu/include/va/va.h
+++ /dev/null
@@ -1,6 +0,0 @@
-// Copyright (C) 2018-2022 Intel Corporation
-// SPDX-License-Identifier: Apache-2.0
-//
-
-typedef cl_uint VASurfaceID;
-typedef void* VADisplay;
diff --git a/tests/fuzz/src/CMakeLists.txt b/tests/fuzz/src/CMakeLists.txt
index 5e6b7b168e..a81c51bb77 100644
--- a/tests/fuzz/src/CMakeLists.txt
+++ b/tests/fuzz/src/CMakeLists.txt
@@ -10,14 +10,13 @@ add_custom_target(fuzz)
 FILE(GLOB tests "*-fuzzer.cc")
 
 add_subdirectory(../../../thirdparty/cnpy ${CMAKE_CURRENT_BINARY_DIR}/cnpy)
-add_subdirectory(../../../thirdparty/zlib ${CMAKE_CURRENT_BINARY_DIR}/zlib)
 
 foreach(test_source ${tests})
     get_filename_component(test_name ${test_source} NAME_WE)
     add_fuzzer(${test_name} ${test_source})
 
     target_link_libraries(${test_name} PRIVATE
-        openvino::runtime cnpy zlib)
+        openvino::runtime cnpy z)
 
     add_dependencies(fuzz ${test_name})
 
diff --git a/thirdparty/CMakeLists.txt b/thirdparty/CMakeLists.txt
index 2d61c5fd7a..97b372998a 100644
--- a/thirdparty/CMakeLists.txt
+++ b/thirdparty/CMakeLists.txt
@@ -12,10 +12,9 @@ endif()
 
 add_subdirectory(ittapi)
 add_subdirectory(itt_collector EXCLUDE_FROM_ALL)
-add_subdirectory(zlib EXCLUDE_FROM_ALL)
 add_subdirectory(cnpy EXCLUDE_FROM_ALL)
 if(ENABLE_INTEL_GPU)
-    add_subdirectory(ocl)
+	#add_subdirectory(ocl)
 endif()
 
 add_subdirectory(xbyak EXCLUDE_FROM_ALL)
@@ -52,21 +51,16 @@ endif()
 add_library(ocv_hal INTERFACE)
 target_include_directories(ocv_hal INTERFACE "${CMAKE_CURRENT_SOURCE_DIR}/ocv")
 
-add_subdirectory(ade EXCLUDE_FROM_ALL)
 add_subdirectory(fluid/modules/gapi EXCLUDE_FROM_ALL)
-set_target_properties(ade fluid PROPERTIES FOLDER thirdparty)
-openvino_developer_export_targets(COMPONENT openvino_common TARGETS ade fluid)
+set_target_properties(fluid PROPERTIES FOLDER thirdparty)
+openvino_developer_export_targets(COMPONENT openvino_common TARGETS fluid)
 
-ov_install_static_lib(ade openvino_common)
 ov_install_static_lib(fluid openvino_common)
 
 #
 # Gflags
 #
 
-add_subdirectory(gflags EXCLUDE_FROM_ALL)
-openvino_developer_export_targets(COMPONENT openvino_common TARGETS gflags)
-
 #
 # Google Tests framework
 #
@@ -89,13 +83,13 @@ if(ENABLE_OV_PADDLE_FRONTEND OR ENABLE_OV_ONNX_FRONTEND OR ENABLE_OV_TF_FRONTEND
             set(Protobuf_DEBUG ON)
         endif()
         find_package(Protobuf 3.18.2 REQUIRED)
-        set(Protobuf_LITE_LIBRARIES protobuf::libprotobuf-lite)
-        set(Protobuf_LIBRARIES protobuf::libprotobuf)
-        set(SYSTEM_PROTOC protobuf::protoc)
+	set(Protobuf_LITE_LIBRARIES protobuf::libprotobuf-lite)
+	set(Protobuf_LIBRARIES protobuf::libprotobuf)
+	#set(SYSTEM_PROTOC protobuf::protoc)
         set(PROTOC_EXECUTABLE ${SYSTEM_PROTOC})
 
         foreach(target ${SYSTEM_PROTOC} ${Protobuf_LIBRARIES} ${Protobuf_LITE_LIBRARIES})
-            set_property(TARGET ${target} PROPERTY IMPORTED_GLOBAL TRUE)
+		#set_property(TARGET ${target} PROPERTY IMPORTED_GLOBAL TRUE)
         endforeach()
     else()
         add_subdirectory(protobuf EXCLUDE_FROM_ALL)
@@ -104,8 +98,8 @@ if(ENABLE_OV_PADDLE_FRONTEND OR ENABLE_OV_ONNX_FRONTEND OR ENABLE_OV_TF_FRONTEND
     # forward variables used in the other places
     set(SYSTEM_PROTOC ${SYSTEM_PROTOC} PARENT_SCOPE)
     set(PROTOC_EXECUTABLE ${PROTOC_EXECUTABLE} PARENT_SCOPE)
-    set(Protobuf_LIBRARIES ${Protobuf_LIBRARIES} PARENT_SCOPE)
-    set(Protobuf_LITE_LIBRARIES ${Protobuf_LITE_LIBRARIES} PARENT_SCOPE)
+    set(Protobuf_LIBRARIES ${Protobuf_LIBRARY} PARENT_SCOPE)
+    set(Protobuf_LITE_LIBRARIES ${Protobuf_LITE_LIBRARY} PARENT_SCOPE)
     set(Protobuf_INCLUDE_DIRS ${Protobuf_INCLUDE_DIRS} PARENT_SCOPE)
     set(Protobuf_IN_FRONTEND ON PARENT_SCOPE)
 
@@ -116,7 +110,7 @@ if(ENABLE_OV_PADDLE_FRONTEND OR ENABLE_OV_ONNX_FRONTEND OR ENABLE_OV_TF_FRONTEND
             set(link_type INTERFACE)
         endif()
         if(CMAKE_COMPILER_IS_GNUCXX OR OV_COMPILER_IS_CLANG)
-            target_compile_options(${target} ${link_type} -Wno-undef)
+		#target_compile_options(${target} ${link_type} -Wno-undef)
         endif()
     endforeach()
 endif()
diff --git a/thirdparty/cnpy/CMakeLists.txt b/thirdparty/cnpy/CMakeLists.txt
index 041031e923..793de9845c 100644
--- a/thirdparty/cnpy/CMakeLists.txt
+++ b/thirdparty/cnpy/CMakeLists.txt
@@ -13,7 +13,7 @@ if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "^(Apple)?Clang$")
                                           PRIVATE -Wno-all)
 endif()
 
-target_link_libraries(${TARGET_NAME} PUBLIC zlib)
+target_link_libraries(${TARGET_NAME} PUBLIC z)
 target_include_directories(${TARGET_NAME} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")
 
 set_target_properties(${TARGET_NAME} PROPERTIES FOLDER thirdparty)
-- 
2.36.1

