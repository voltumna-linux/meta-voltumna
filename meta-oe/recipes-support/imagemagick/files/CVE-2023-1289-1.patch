From 9d3dd9192f6710ec8e10f5edda9b7bf67caeb232 Mon Sep 17 00:00:00 2001
From: Cristy <urban-warrior@imagemagick.org>
Date: Mon, 6 Mar 2023 14:14:36 -0500
Subject: [PATCH] recursion detection framework

CVE: CVE-2023-1289
Upstream-Status: Backport [https://github.com/ImageMagick/ImageMagick/commit/9d3dd9192f6710ec8e10f5edda9b7bf67caeb232.patch]
Comment: Hunk #2 and #3 for draw.c from orignal patch are excluded from this because
these hunks remove the piece of code not present in imagemagick 7.0.10.
Refreshed hunk2 of image.c, draw.h and draw.c
Signed-off-by: Sana Kazi Sana.Kazi@kpit.com
---
 MagickCore/constitute.c | 12 ++++++++++++
 MagickCore/draw.c       | 18 +++---------------
 MagickCore/draw.h       |  3 +++
 MagickCore/image.c      |  2 ++
 MagickCore/image.h      |  3 +++
 5 files changed, 23 insertions(+), 15 deletions(-)

diff --git a/MagickCore/constitute.c b/MagickCore/constitute.c
index aa1a0c2682b..5c84602da87 100644
--- a/MagickCore/constitute.c
+++ b/MagickCore/constitute.c
@@ -130,6 +130,11 @@
 %    o exception: return any errors or warnings in this structure.
 %
 */
+/*
+  Define declarations.
+*/
+#define MaxReadRecursionDepth  100
+
 MagickExport Image *ConstituteImage(const size_t columns,const size_t rows,
   const char *map,const StorageType storage,const void *pixels,
   ExceptionInfo *exception)
@@ -558,9 +558,16 @@ MagickExport Image *ReadImage(const Imag
       if (GetMagickDecoderThreadSupport(magick_info) == MagickFalse)
         LockSemaphoreInfo(magick_info->semaphore);
       status=IsCoderAuthorized(read_info->magick,ReadPolicyRights,exception);
+      if (((ImageInfo *) image_info)->recursion_depth++ > MaxReadRecursionDepth)
+        {
+          (void) ThrowMagickException(exception,GetMagickModule(),CoderError,
+            "NumberOfImagesIsNotSupported","`%s'",read_info->magick);
+          status=MagickFalse;
+        }
       image=(Image *) NULL;
       if (status != MagickFalse)
         image=decoder(read_info,exception);
+      ((ImageInfo *) image_info)->recursion_depth--;
       if (GetMagickDecoderThreadSupport(magick_info) == MagickFalse)
         UnlockSemaphoreInfo(magick_info->semaphore);
     }
diff --git a/MagickCore/draw.c b/MagickCore/draw.c
+index ff78d620afd..c875c07acc6 100644
+--- a/MagickCore/draw.c
++++ b/MagickCore/draw.c
@@ -5916,7 +5916,8 @@ MagickExport void GetDrawInfo(const Imag
   (void) LogMagickEvent(TraceEvent,GetMagickModule(),"...");
   assert(draw_info != (DrawInfo *) NULL);
   (void) memset(draw_info,0,sizeof(*draw_info));
-  clone_info=CloneImageInfo(image_info);
+  draw_info->image_info=image_info;
+  clone_info=CloneImageInfo(draw_info->image_info);
   GetAffineMatrix(&draw_info->affine);
   exception=AcquireExceptionInfo();
   (void) QueryColorCompliance("#000F",AllCompliance,&draw_info->fill,
diff --git a/MagickCore/draw.h b/MagickCore/draw.h
index 38a52e20361..69257fc02a1 100644
--- a/MagickCore/draw.h
+++ b/MagickCore/draw.h
@@ -340,6 +340,9 @@ typedef struct _DrawInfo
 
   char
     *id;
+
+  const ImageInfo
+    *image_info;  
 } DrawInfo;
 
 typedef struct _PrimitiveInfo
diff --git a/MagickCore/image.c b/MagickCore/image.c
index 9bf47e6e01d..8289139bf6f 100644
--- a/MagickCore/image.c
+++ b/MagickCore/image.c
@@ -995,6 +995,7 @@ MagickExport ImageInfo *CloneImageInfo(c
     MagickPathExtent);
   clone_info->channel=image_info->channel;
   (void) CloneImageOptions(clone_info,image_info);
+  clone_info->recursion_depth=image_info->recursion_depth;
   clone_info->debug=IsEventLogging();
   clone_info->signature=image_info->signature;
   return(clone_info);
@@ -1350,6 +1350,7 @@ MagickExport void GetImageInfo(ImageInfo
   image_info->quality=UndefinedCompressionQuality;
   image_info->antialias=MagickTrue;
   image_info->dither=MagickTrue;
+  image_info->depth=0;
   synchronize=GetEnvironmentValue("MAGICK_SYNCHRONIZE");
   if (synchronize != (const char *) NULL)
     {
diff --git a/MagickCore/image.h b/MagickCore/image.h
index b9d870a9271..df6bf9bd103 100644
--- a/MagickCore/image.h
+++ b/MagickCore/image.h
@@ -492,6 +492,9 @@ struct _ImageInfo
 
   PixelInfo
     matte_color;        /* matte (frame) color */
+
+  size_t
+    recursion_depth;  /* recursion detection */
 };
 
 extern MagickExport ChannelType
