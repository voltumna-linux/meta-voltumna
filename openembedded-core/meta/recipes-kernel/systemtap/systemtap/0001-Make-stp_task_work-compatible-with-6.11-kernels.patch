From 317669e7b44bc2688253f5ab9641c308f30566bc Mon Sep 17 00:00:00 2001
From: Martin Cermak <mcermak@redhat.com>
Date: Wed, 24 Jul 2024 16:47:42 +0200
Subject: [PATCH] Make stp_task_work compatible with 6.11 kernels

Update systemtap runtime so that it works with kernel commit
68cbd415dd4b task_work:

s/task_work_cancel()/task_work_cancel_func()/

Upstream-Status: Backport [https://sourceware.org/git/?p=systemtap.git;a=commit;h=a64dc4e2e0195ca80c6509df511a42459b40e9af]

Signed-off-by: Jinfeng Wang <jinfeng.wang.cn@windriver.com>
---
 buildrun.cxx                                  |  1 +
 .../linux/autoconf-task_work_cancel_func.c    |  3 +++
 runtime/linux/runtime.h                       |  2 +-
 runtime/stp_task_work.c                       | 21 ++++++++++++++-----
 4 files changed, 21 insertions(+), 6 deletions(-)
 create mode 100644 runtime/linux/autoconf-task_work_cancel_func.c

diff --git a/buildrun.cxx b/buildrun.cxx
index 816842072..4c528b1b1 100644
--- a/buildrun.cxx
+++ b/buildrun.cxx
@@ -396,6 +396,7 @@ compile_pass (systemtap_session& s)
   output_exportconf(s, o2, "__module_text_address", "STAPCONF_MODULE_TEXT_ADDRESS");
   output_exportconf(s, o2, "add_timer_on", "STAPCONF_ADD_TIMER_ON");
   output_autoconf(s, o, cs, "autoconf-514-panic.c", "STAPCONF_514_PANIC", NULL);
+  output_autoconf(s, o, cs, "autoconf-task_work_cancel_func.c", "STAPCONF_TASK_WORK_CANCEL_FUNC", NULL);
   
   output_dual_exportconf(s, o2, "probe_kernel_read", "probe_kernel_write", "STAPCONF_PROBE_KERNEL");
   output_autoconf(s, o, cs, "autoconf-hw_breakpoint_context.c",
diff --git a/runtime/linux/autoconf-task_work_cancel_func.c b/runtime/linux/autoconf-task_work_cancel_func.c
new file mode 100644
index 000000000..0d460de6c
--- /dev/null
+++ b/runtime/linux/autoconf-task_work_cancel_func.c
@@ -0,0 +1,3 @@
+#include <linux/task_work.h>
+
+void* c = & task_work_cancel_func;
diff --git a/runtime/linux/runtime.h b/runtime/linux/runtime.h
index a5840794a..acb32d584 100644
--- a/runtime/linux/runtime.h
+++ b/runtime/linux/runtime.h
@@ -246,7 +246,7 @@ static void *kallsyms_uprobe_get_swbp_addr;
 static void *kallsyms_task_work_add;
 #endif
 #if !defined(STAPCONF_TASK_WORK_CANCEL_EXPORTED)
-static void *kallsyms_task_work_cancel;
+static void *kallsyms_task_work_cancel_fn;
 #endif
 
 #if !defined(STAPCONF_TRY_TO_WAKE_UP_EXPORTED) && !defined(STAPCONF_WAKE_UP_STATE_EXPORTED)
diff --git a/runtime/stp_task_work.c b/runtime/stp_task_work.c
index 0dd3095b6..4818fecbf 100644
--- a/runtime/stp_task_work.c
+++ b/runtime/stp_task_work.c
@@ -3,14 +3,25 @@
 
 #include "linux/task_work_compatibility.h"
 
+// Handle kernel commit 68cbd415dd4b9c5b9df69f0f091879e56bf5907a
+// task_work: s/task_work_cancel()/task_work_cancel_func()/
+#if defined(STAPCONF_TASK_WORK_CANCEL_FUNC)
+#define TASK_WORK_CANCEL_FN task_work_cancel_func
+#else
+#define TASK_WORK_CANCEL_FN task_work_cancel
+#endif
+
+#define STRINGIFY(x) #x
+#define TOSTRING(x) STRINGIFY(x)
+
 #if !defined(STAPCONF_TASK_WORK_ADD_EXPORTED)
 // First typedef from the original decls, then #define as typecasted calls.
 typedef typeof(&task_work_add) task_work_add_fn;
 #define task_work_add(a,b,c) ibt_wrapper(int, (* (task_work_add_fn)kallsyms_task_work_add)((a), (b), (c)))
 #endif
 #if !defined(STAPCONF_TASK_WORK_CANCEL_EXPORTED)
-typedef typeof(&task_work_cancel) task_work_cancel_fn;
-#define task_work_cancel(a,b) ibt_wrapper(struct callback_head *, (* (task_work_cancel_fn)kallsyms_task_work_cancel)((a), (b)))
+typedef typeof(&TASK_WORK_CANCEL_FN) task_work_cancel_fn;
+#define task_work_cancel(a,b) ibt_wrapper(struct callback_head *, (* (task_work_cancel_fn)kallsyms_task_work_cancel_fn)((a), (b)))
 #endif
 
 /* To avoid a crash when a task_work callback gets called after the
@@ -35,9 +46,9 @@ stp_task_work_init(void)
         }
 #endif
 #if !defined(STAPCONF_TASK_WORK_CANCEL_EXPORTED)
-        kallsyms_task_work_cancel = (void *)kallsyms_lookup_name("task_work_cancel");
-        if (kallsyms_task_work_cancel == NULL) {
-		_stp_error("Can't resolve task_work_cancel!");
+        kallsyms_task_work_cancel_fn = (void *)kallsyms_lookup_name(TOSTRING(TASK_WORK_CANCEL_FN));
+        if (kallsyms_task_work_cancel_fn == NULL) {
+                _stp_error("Can't resolve %s!", TOSTRING(TASK_WORK_CANCEL_FN));
 		return -ENOENT;
         }
 #endif
-- 
2.34.1

