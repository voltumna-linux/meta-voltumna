From 17d3883fe9c88b823002ad9fafb42313ddc3d3d5 Mon Sep 17 00:00:00 2001
From: Johannes Schindelin <johannes.schindelin@gmx.de>
Date: Mon, 8 Aug 2022 13:27:47 +0000
Subject: [PATCH] setup: prepare for more detailed "dubious ownership" messages

When verifying the ownership of the Git directory, we sometimes would
like to say a bit more about it, e.g. when using a platform-dependent
code path (think: Windows has the permission model that is so different
from Unix'), but only when it is a appropriate to actually say
something.

To allow for that, collect that information and hand it back to the
caller (whose responsibility it is to show it or not).

Note: We do not actually fill in any platform-dependent information yet,
this commit just adds the infrastructure to be able to do so.

Based-on-an-idea-by: Junio C Hamano <gitster@pobox.com>
Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
Signed-off-by: Junio C Hamano <gitster@pobox.com>

CVE: CVE-2024-32004

Upstream-Status: Backport [https://github.com/git/git/commit/17d3883fe9c88b823002ad9fafb42313ddc3d3d5]

Signed-off-by: Soumya Sambu <soumya.sambu@windriver.com>
---
 compat/mingw.c    |  2 +-
 compat/mingw.h    |  2 +-
 git-compat-util.h |  5 ++++-
 setup.c           | 25 +++++++++++++++----------
 4 files changed, 21 insertions(+), 13 deletions(-)

diff --git a/compat/mingw.c b/compat/mingw.c
index 41fc163..9306a0e 100644
--- a/compat/mingw.c
+++ b/compat/mingw.c
@@ -2658,7 +2658,7 @@ static PSID get_current_user_sid(void)
	return result;
 }

-int is_path_owned_by_current_sid(const char *path)
+int is_path_owned_by_current_sid(const char *path, struct strbuf *report)
 {
	WCHAR wpath[MAX_PATH];
	PSID sid = NULL;
diff --git a/compat/mingw.h b/compat/mingw.h
index ffa53a4..a1a69c5 100644
--- a/compat/mingw.h
+++ b/compat/mingw.h
@@ -457,7 +457,7 @@ char *mingw_query_user_email(void);
  * Verifies that the specified path is owned by the user running the
  * current process.
  */
-int is_path_owned_by_current_sid(const char *path);
+int is_path_owned_by_current_sid(const char *path, struct strbuf *report);
 #define is_path_owned_by_current_user is_path_owned_by_current_sid

 /**
diff --git a/git-compat-util.h b/git-compat-util.h
index 1c651c8..27b84b8 100644
--- a/git-compat-util.h
+++ b/git-compat-util.h
@@ -23,6 +23,9 @@
 #include <crtdbg.h>
 #endif

+struct strbuf;
+
+
 #define _FILE_OFFSET_BITS 64


@@ -475,7 +478,7 @@ static inline void extract_id_from_env(const char *env, uid_t *id)
	}
 }

-static inline int is_path_owned_by_current_uid(const char *path)
+static inline int is_path_owned_by_current_uid(const char *path, struct strbuf *report)
 {
	struct stat st;
	uid_t euid;
diff --git a/setup.c b/setup.c
index 8686ffe..1ad7330 100644
--- a/setup.c
+++ b/setup.c
@@ -1128,16 +1128,17 @@ static int safe_directory_cb(const char *key, const char *value, void *d)
  * added, for bare ones their git directory.
  */
 static int ensure_valid_ownership(const char *gitfile,
-				const char *worktree, const char *gitdir)
+				  const char *worktree, const char *gitdir,
+				  struct strbuf *report)
 {
	struct safe_directory_data data = {
		.path = worktree ? worktree : gitdir
	};

	if (!git_env_bool("GIT_TEST_ASSUME_DIFFERENT_OWNER", 0) &&
-	   (!gitfile || is_path_owned_by_current_user(gitfile)) &&
-	   (!worktree || is_path_owned_by_current_user(worktree)) &&
-	   (!gitdir || is_path_owned_by_current_user(gitdir)))
+	    (!gitfile || is_path_owned_by_current_user(gitfile, report)) &&
+	    (!worktree || is_path_owned_by_current_user(worktree, report)) &&
+	    (!gitdir || is_path_owned_by_current_user(gitdir, report)))
		return 1;

	/*
@@ -1177,6 +1178,7 @@ enum discovery_result {
  */
 static enum discovery_result setup_git_directory_gently_1(struct strbuf *dir,
							  struct strbuf *gitdir,
+							  struct strbuf *report,
							  int die_on_error)
 {
	const char *env_ceiling_dirs = getenv(CEILING_DIRECTORIES_ENVIRONMENT);
@@ -1264,7 +1266,7 @@ static enum discovery_result setup_git_directory_gently_1(struct strbuf *dir,

			if (ensure_valid_ownership(gitfile,
						 dir->buf,
-				 (gitdir_path ? gitdir_path : gitdirenv))) {
+				 (gitdir_path ? gitdir_path : gitdirenv), report)) {
				strbuf_addstr(gitdir, gitdirenv);
				ret = GIT_DIR_DISCOVERED;
			} else
@@ -1287,7 +1289,7 @@ static enum discovery_result setup_git_directory_gently_1(struct strbuf *dir,
		}

		if (is_git_directory(dir->buf)) {
-			if (!ensure_valid_ownership(NULL, NULL, dir->buf))
+			if (!ensure_valid_ownership(NULL, NULL, dir->buf, report))
				return GIT_DIR_INVALID_OWNERSHIP;
			strbuf_addstr(gitdir, ".");
			return GIT_DIR_BARE;
@@ -1320,7 +1322,7 @@ int discover_git_directory(struct strbuf *commondir,
		return -1;

	cwd_len = dir.len;
-	if (setup_git_directory_gently_1(&dir, gitdir, 0) <= 0) {
+	if (setup_git_directory_gently_1(&dir, gitdir, NULL, 0) <= 0) {
		strbuf_release(&dir);
		return -1;
	}
@@ -1367,7 +1369,7 @@ int discover_git_directory(struct strbuf *commondir,
 const char *setup_git_directory_gently(int *nongit_ok)
 {
	static struct strbuf cwd = STRBUF_INIT;
-	struct strbuf dir = STRBUF_INIT, gitdir = STRBUF_INIT;
+	struct strbuf dir = STRBUF_INIT, gitdir = STRBUF_INIT, report = STRBUF_INIT;
	const char *prefix = NULL;
	struct repository_format repo_fmt = REPOSITORY_FORMAT_INIT;

@@ -1392,7 +1394,7 @@ const char *setup_git_directory_gently(int *nongit_ok)
		die_errno(_("Unable to read current working directory"));
	strbuf_addbuf(&dir, &cwd);

-	switch (setup_git_directory_gently_1(&dir, &gitdir, 1)) {
+	switch (setup_git_directory_gently_1(&dir, &gitdir, &report, 1)) {
	case GIT_DIR_EXPLICIT:
		prefix = setup_explicit_git_dir(gitdir.buf, &cwd, &repo_fmt, nongit_ok);
		break;
@@ -1424,12 +1426,14 @@ const char *setup_git_directory_gently(int *nongit_ok)
		if (!nongit_ok) {
			struct strbuf quoted = STRBUF_INIT;

+			strbuf_complete(&report, '\n');
			sq_quote_buf_pretty(&quoted, dir.buf);
			die(_("detected dubious ownership in repository at '%s'\n"
+			      "%s"
			      "To add an exception for this directory, call:\n"
			      "\n"
			      "\tgit config --global --add safe.directory %s"),
-			    dir.buf, quoted.buf);
+			    dir.buf, report.buf, quoted.buf);
		}
		*nongit_ok = 1;
		break;
@@ -1508,6 +1512,7 @@ const char *setup_git_directory_gently(int *nongit_ok)

	strbuf_release(&dir);
	strbuf_release(&gitdir);
+	strbuf_release(&report);
	clear_repository_format(&repo_fmt);

	return prefix;
--
2.40.0
