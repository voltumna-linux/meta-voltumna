From a297008ddf730128d62e8389612d180b8603a859 Mon Sep 17 00:00:00 2001
From: Stephen Chivers <schivers@csc.com>
Date: Wed, 7 Aug 2019 18:43:48 +0200
Subject: [PATCH 1/3] MVME5100 RTC patch for Linux-3.14

---
 arch/powerpc/configs/mvme5100_defconfig       |  3 +-
 arch/powerpc/platforms/embedded6xx/mvme5100.c | 94 +++++++++++++++++++
 drivers/rtc/Kconfig                           |  7 +-
 drivers/rtc/rtc-m48t59.c                      | 21 ++++-
 include/linux/rtc/m48t59.h                    |  3 +
 5 files changed, 123 insertions(+), 5 deletions(-)

diff --git a/arch/powerpc/configs/mvme5100_defconfig b/arch/powerpc/configs/mvme5100_defconfig
index 0a0d046fc445..6f8860df89c3 100644
--- a/arch/powerpc/configs/mvme5100_defconfig
+++ b/arch/powerpc/configs/mvme5100_defconfig
@@ -18,7 +18,6 @@ CONFIG_MODULE_UNLOAD=y
 # CONFIG_PPC_PMAC is not set
 CONFIG_EMBEDDED6xx=y
 CONFIG_MVME5100=y
-CONFIG_KVM_GUEST=y
 CONFIG_HZ_100=y
 # CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
 # CONFIG_COMPACTION is not set
@@ -86,6 +85,8 @@ CONFIG_I2C_MPC=y
 # CONFIG_VGA_CONSOLE is not set
 # CONFIG_HID is not set
 # CONFIG_USB_SUPPORT is not set
+CONFIG_RTC_CLASS=y
+CONFIG_RTC_DRV_M48T59=y
 # CONFIG_IOMMU_SUPPORT is not set
 CONFIG_EXT2_FS=m
 CONFIG_EXT4_FS=m
diff --git a/arch/powerpc/platforms/embedded6xx/mvme5100.c b/arch/powerpc/platforms/embedded6xx/mvme5100.c
index 1cd488daa0bf..83f72723e2f1 100644
--- a/arch/powerpc/platforms/embedded6xx/mvme5100.c
+++ b/arch/powerpc/platforms/embedded6xx/mvme5100.c
@@ -13,6 +13,7 @@
  */
 
 #include <linux/of_platform.h>
+#include <linux/rtc/m48t59.h>
 
 #include <asm/i8259.h>
 #include <asm/pci-bridge.h>
@@ -34,6 +35,14 @@
 #define BOARD_EXT_FEATURE1_REG	0xfef880f0
 #define BOARD_EXT_FEATURE2_REG	0xfef88100
 
+/*
+ * Define the M48T37 NVRAM/RTC address strobe & data registers relative
+ * to the base address of the device.
+ */
+#define NVRAM_AS0		0x0
+#define NVRAM_AS1		0x08
+#define NVRAM_DATA		0x10
+
 static phys_addr_t pci_membase;
 static u_char *restart;
 
@@ -192,6 +201,91 @@ static int __init mvme5100_probe(void)
 	return of_machine_is_compatible("MVME5100");
 }
 
+#if CONFIG_RTC_DRV_M48T59
+
+static unsigned char nvrtc_read_byte(struct device *dev, u32 ofs)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct m48t59_plat_data *pdata = pdev->dev.platform_data;
+	u8 __iomem *addr = pdata->ioaddr;
+	u8 b;
+
+	writeb(ofs, addr + NVRAM_AS0);
+	writeb(ofs >> 8, addr + NVRAM_AS1);
+	b = readb(addr + NVRAM_DATA);
+
+	return b;
+}
+
+static void nvrtc_write_byte(struct device *dev, u32 ofs, u8 val)
+{
+	struct platform_device *pdev = to_platform_device(dev);
+	struct m48t59_plat_data *pdata = pdev->dev.platform_data;
+	u8 __iomem *addr = pdata->ioaddr;
+
+	writeb(ofs, addr + NVRAM_AS0);
+	writeb(ofs >> 8, addr + NVRAM_AS1);
+	writeb(val, addr + NVRAM_DATA);
+}
+
+static struct resource m48t37_resource[2];
+
+static struct  m48t59_plat_data m48t37_data = {
+	.read_byte = nvrtc_read_byte,
+	.write_byte = nvrtc_write_byte,
+	.type = M48T59RTC_TYPE_M48T37,
+};
+
+static struct platform_device m48t37_rtc = {
+	.name		= "rtc-m48t59",
+	.id		= 0,
+	.num_resources	= 2,
+	.resource	= m48t37_resource,
+	.dev    = {
+		.platform_data = &m48t37_data,
+	},
+};
+
+static int __init mvme5100_rtc_init(void)
+{
+	int result = 0;
+	int irq;
+	struct device_node *np;
+	struct resource *res = m48t37_rtc.resource;
+
+	np = of_find_compatible_node(NULL, NULL, "m48t59");
+	if (np == NULL) {
+		pr_info("mvme5100_rtc_init: no RTC found.\n");
+		return 0;
+	}
+
+	of_address_to_resource(np, 0, res);
+	m48t37_data.ioaddr = ioremap(res->start, 1 + res->end - res->start);
+
+	irq = irq_of_parse_and_map(np, 0);
+	if (irq != NO_IRQ)
+	{
+		res[1].start = irq;
+		res[1].end = irq;
+		res[1].flags = IORESOURCE_IRQ;
+	}
+	else
+		pr_warn("mvme5100_rtc_init: no IRQ for RTC\n");
+
+	of_node_put(np);
+
+	pr_info("Found RTC (m48t37) at i/o 0x%x irq %d\n", res->start, irq);
+
+	result = platform_device_register(&m48t37_rtc);
+	if (result < 0)
+		pr_err("Failed to register RTC. Result: %d\n", result);
+
+	return result;
+}
+
+arch_initcall(mvme5100_rtc_init);
+#endif
+
 static int __init probe_of_platform_devices(void)
 {
 
diff --git a/drivers/rtc/Kconfig b/drivers/rtc/Kconfig
index c5b980414086..c2ed7f441f37 100644
--- a/drivers/rtc/Kconfig
+++ b/drivers/rtc/Kconfig
@@ -1159,14 +1159,15 @@ config RTC_DRV_M48T35
 	  will be called "rtc-m48t35".
 
 config RTC_DRV_M48T59
-	tristate "ST M48T59/M48T08/M48T02"
+	tristate "ST M48T59/M48T37/M48T08/M48T02"
 	depends on HAS_IOMEM
 	help
 	  If you say Y here you will get support for the
-	  ST M48T59 RTC chip and compatible ST M48T08 and M48T02.
+	  ST M48T59 RTC chip and compatible ST M48T37, M48T08 and M48T02.
 
 	  These chips are usually found in Sun SPARC and UltraSPARC
-	  workstations.
+	  workstations and in some single board computers such as
+	  Motorola MVME-167 and MVME-5100.
 
 	  This driver can also be built as a module, if so, the module
 	  will be called "rtc-m48t59".
diff --git a/drivers/rtc/rtc-m48t59.c b/drivers/rtc/rtc-m48t59.c
index 67e218758a8b..007ac5ef6d5a 100644
--- a/drivers/rtc/rtc-m48t59.c
+++ b/drivers/rtc/rtc-m48t59.c
@@ -66,6 +66,7 @@ static int m48t59_rtc_read_time(struct device *dev, struct rtc_time *tm)
 	struct m48t59_private *m48t59 = dev_get_drvdata(dev);
 	unsigned long flags;
 	u8 val;
+	int century;
 
 	spin_lock_irqsave(&m48t59->lock, flags);
 	/* Issue the READ command */
@@ -82,6 +83,12 @@ static int m48t59_rtc_read_time(struct device *dev, struct rtc_time *tm)
 		dev_dbg(dev, "Century bit is enabled\n");
 		tm->tm_year += 100;	/* one century */
 	}
+
+	if (pdata->type == M48T59RTC_TYPE_M48T37) {
+		century = bcd2bin(M48T59_READ(M48T37_CENTURY)) * 100;
+		tm->tm_year = tm->tm_year + century - 1900;
+	}
+
 #ifdef CONFIG_SPARC
 	/* Sun SPARC machines count years since 1968 */
 	tm->tm_year += 68;
@@ -137,6 +144,11 @@ static int m48t59_rtc_set_time(struct device *dev, struct rtc_time *tm)
 	val |= (bin2bcd(tm->tm_wday) & 0x07);
 	M48T59_WRITE(val, M48T59_WDAY);
 
+	if (pdata->type == M48T59RTC_TYPE_M48T37) {
+		val = bin2bcd((tm->tm_year + 1900) / 100);
+		M48T59_WRITE(val, M48T37_CENTURY);
+	}
+
 	/* Clear the WRITE bit */
 	M48T59_CLEAR_BITS(M48T59_CNTL_WRITE, M48T59_CNTL);
 	spin_unlock_irqrestore(&m48t59->lock, flags);
@@ -366,6 +378,7 @@ static int m48t59_rtc_probe(struct platform_device *pdev)
 	struct m48t59_private *m48t59 = NULL;
 	struct resource *res;
 	int ret = -ENOMEM;
+	int uie_unsupported = 0;
 	const struct rtc_class_ops *ops;
 	struct nvmem_config nvmem_cfg = {
 		.name = "m48t59-",
@@ -451,6 +464,11 @@ static int m48t59_rtc_probe(struct platform_device *pdev)
 		ops = &m48t02_rtc_ops;
 		pdata->offset = 0x1ff0;
 		break;
+	case M48T59RTC_TYPE_M48T37:
+		ops = &m48t59_rtc_ops;
+		pdata->offset = 0x7ff0;
+		uie_unsupported = 1;
+		break;
 	default:
 		dev_err(&pdev->dev, "Unknown RTC type\n");
 		return -ENODEV;
@@ -463,6 +481,7 @@ static int m48t59_rtc_probe(struct platform_device *pdev)
 	if (IS_ERR(m48t59->rtc))
 		return PTR_ERR(m48t59->rtc);
 
+	m48t59->rtc->uie_unsupported = uie_unsupported;
 	m48t59->rtc->nvram_old_abi = true;
 	m48t59->rtc->ops = ops;
 
@@ -491,5 +510,5 @@ static struct platform_driver m48t59_rtc_driver = {
 module_platform_driver(m48t59_rtc_driver);
 
 MODULE_AUTHOR("Mark Zhan <rongkai.zhan@windriver.com>");
-MODULE_DESCRIPTION("M48T59/M48T02/M48T08 RTC driver");
+MODULE_DESCRIPTION("M48T59/M48T37/M48T02/M48T08 RTC driver");
 MODULE_LICENSE("GPL");
diff --git a/include/linux/rtc/m48t59.h b/include/linux/rtc/m48t59.h
index 9465d5405fe2..385ae9f73ea1 100644
--- a/include/linux/rtc/m48t59.h
+++ b/include/linux/rtc/m48t59.h
@@ -41,9 +41,12 @@
 #define M48T59_FLAGS_AF			0x40	/* alarm */
 #define M48T59_FLAGS_BF			0x10	/* low battery */
 
+#define M48T37_CENTURY		0x1
+
 #define M48T59RTC_TYPE_M48T59	0 /* to keep compatibility */
 #define M48T59RTC_TYPE_M48T02	1
 #define M48T59RTC_TYPE_M48T08	2
+#define M48T59RTC_TYPE_M48T37	3
 
 struct m48t59_plat_data {
 	/* The method to access M48T59 registers */
-- 
2.17.1

