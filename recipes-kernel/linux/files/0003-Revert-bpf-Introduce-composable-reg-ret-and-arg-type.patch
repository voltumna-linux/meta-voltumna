From bd816f688579e013241da5a5d7c49380d0936b55 Mon Sep 17 00:00:00 2001
From: Alessio Igor Bogani <alessio.bogani@elettra.eu>
Date: Fri, 2 Dec 2022 12:16:55 +0100
Subject: [PATCH 3/3] Revert "bpf: Introduce composable reg, ret and arg
 types."

This reverts commit 1aa3467aa003c6d72567547f257d4255a4d72952.
---
 include/linux/bpf.h          | 49 ------------------------------------
 include/linux/bpf_verifier.h | 14 -----------
 2 files changed, 63 deletions(-)

diff --git a/include/linux/bpf.h b/include/linux/bpf.h
index f5298a23049b..e6ddf5a3beaf 100644
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -254,29 +254,6 @@ bool bpf_map_meta_equal(const struct bpf_map *meta0,
 
 extern const struct bpf_map_ops bpf_map_offload_ops;
 
-/* bpf_type_flag contains a set of flags that are applicable to the values of
- * arg_type, ret_type and reg_type. For example, a pointer value may be null,
- * or a memory is read-only. We classify types into two categories: base types
- * and extended types. Extended types are base types combined with a type flag.
- *
- * Currently there are no more than 32 base types in arg_type, ret_type and
- * reg_types.
- */
-#define BPF_BASE_TYPE_BITS	8
-
-enum bpf_type_flag {
-	/* PTR may be NULL. */
-	PTR_MAYBE_NULL		= BIT(0 + BPF_BASE_TYPE_BITS),
-
-	__BPF_TYPE_LAST_FLAG	= PTR_MAYBE_NULL,
-};
-
-/* Max number of base types. */
-#define BPF_BASE_TYPE_LIMIT	(1UL << BPF_BASE_TYPE_BITS)
-
-/* Max number of all types. */
-#define BPF_TYPE_LIMIT		(__BPF_TYPE_LAST_FLAG | (__BPF_TYPE_LAST_FLAG - 1))
-
 /* function argument constraints */
 enum bpf_arg_type {
 	ARG_DONTCARE = 0,	/* unused argument in helper function */
@@ -319,13 +296,7 @@ enum bpf_arg_type {
 	ARG_PTR_TO_BTF_ID_SOCK_COMMON,	/* pointer to in-kernel sock_common or bpf-mirrored bpf_sock */
 	ARG_PTR_TO_PERCPU_BTF_ID,	/* pointer to in-kernel percpu type */
 	__BPF_ARG_TYPE_MAX,
-
-	/* This must be the last entry. Its purpose is to ensure the enum is
-	 * wide enough to hold the higher bits reserved for bpf_type_flag.
-	 */
-	__BPF_ARG_TYPE_LIMIT	= BPF_TYPE_LIMIT,
 };
-static_assert(__BPF_ARG_TYPE_MAX <= BPF_BASE_TYPE_LIMIT);
 
 /* type of values returned from helper functions */
 enum bpf_return_type {
@@ -340,12 +311,6 @@ enum bpf_return_type {
 	RET_PTR_TO_BTF_ID_OR_NULL,	/* returns a pointer to a btf_id or NULL */
 	RET_PTR_TO_MEM_OR_BTF_ID_OR_NULL, /* returns a pointer to a valid memory or a btf_id or NULL */
 	RET_PTR_TO_MEM_OR_BTF_ID,	/* returns a pointer to a valid memory or a btf_id */
-	__BPF_RET_TYPE_MAX,
-
-	/* This must be the last entry. Its purpose is to ensure the enum is
-	 * wide enough to hold the higher bits reserved for bpf_type_flag.
-	 */
-	__BPF_RET_TYPE_LIMIT	= BPF_TYPE_LIMIT,
 };
 
 /* eBPF function prototype used by verifier to allow BPF_CALLs from eBPF programs
@@ -445,20 +410,6 @@ enum bpf_reg_type {
 	PTR_TO_RDWR_BUF,	 /* reg points to a read/write buffer */
 	PTR_TO_RDWR_BUF_OR_NULL, /* reg points to a read/write buffer or NULL */
 	PTR_TO_PERCPU_BTF_ID,	 /* reg points to a percpu kernel variable */
-
-	/* Extended reg_types. */
-	PTR_TO_MAP_VALUE_OR_NULL	= PTR_MAYBE_NULL | PTR_TO_MAP_VALUE,
-	PTR_TO_SOCKET_OR_NULL		= PTR_MAYBE_NULL | PTR_TO_SOCKET,
-	PTR_TO_SOCK_COMMON_OR_NULL	= PTR_MAYBE_NULL | PTR_TO_SOCK_COMMON,
-	PTR_TO_TCP_SOCK_OR_NULL		= PTR_MAYBE_NULL | PTR_TO_TCP_SOCK,
-	PTR_TO_BTF_ID_OR_NULL		= PTR_MAYBE_NULL | PTR_TO_BTF_ID,
-	PTR_TO_MEM_OR_NULL		= PTR_MAYBE_NULL | PTR_TO_MEM,
-	__BPF_REG_TYPE_MAX,
-
-	/* This must be the last entry. Its purpose is to ensure the enum is
-	 * wide enough to hold the higher bits reserved for bpf_type_flag.
-	 */
-	__BPF_REG_TYPE_LIMIT	= BPF_TYPE_LIMIT,
 };
 
 /* The information passed from prog-specific *_is_valid_access
diff --git a/include/linux/bpf_verifier.h b/include/linux/bpf_verifier.h
index 6eb59521204b..391bc1480dfb 100644
--- a/include/linux/bpf_verifier.h
+++ b/include/linux/bpf_verifier.h
@@ -488,18 +488,4 @@ int bpf_check_attach_target(struct bpf_verifier_log *log,
 			    u32 btf_id,
 			    struct bpf_attach_target_info *tgt_info);
 
-#define BPF_BASE_TYPE_MASK	GENMASK(BPF_BASE_TYPE_BITS - 1, 0)
-
-/* extract base type from bpf_{arg, return, reg}_type. */
-static inline u32 base_type(u32 type)
-{
-	return type & BPF_BASE_TYPE_MASK;
-}
-
-/* extract flags from an extended type. See bpf_type_flag in bpf.h. */
-static inline u32 type_flag(u32 type)
-{
-	return type & ~BPF_BASE_TYPE_MASK;
-}
-
 #endif /* _LINUX_BPF_VERIFIER_H */
-- 
2.17.1

