From d89e9f8197963529320fcd9678ef9b9b9116c23f Mon Sep 17 00:00:00 2001
From: Kalyan Rankireddy <Kalyan.Rankireddy@amd.com>
Date: Tue, 23 Jan 2024 14:55:31 +0530
Subject: [PATCH] amd-xgbe: Crater xgbe support

Crater has only 1G MAC controller and the PCS offsets are accesses by PCI IO address

Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
Change-Id: I59128f29e68d073a89d439fa0ef3b2b39f4bc557
---
 drivers/net/ethernet/amd/xgbe/xgbe-dev.c  | 68 ++++++++++++++++--
 drivers/net/ethernet/amd/xgbe/xgbe-mdio.c |  7 +-
 drivers/net/ethernet/amd/xgbe/xgbe-pci.c  | 85 +++++++++++++++++------
 drivers/net/ethernet/amd/xgbe/xgbe.h      |  2 +
 4 files changed, 137 insertions(+), 25 deletions(-)
 mode change 100644 => 100755 drivers/net/ethernet/amd/xgbe/xgbe-dev.c
 mode change 100644 => 100755 drivers/net/ethernet/amd/xgbe/xgbe-pci.c

diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
old mode 100644
new mode 100755
index 4d27280d32aa..3656b911a8d9
--- a/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-dev.c
@@ -120,6 +120,7 @@
 #include <linux/bitrev.h>
 #include <linux/crc32.h>
 #include <linux/crc32poly.h>
+#include <linux/pci.h>
 
 #include "xgbe.h"
 #include "xgbe-common.h"
@@ -1156,6 +1157,8 @@ static int xgbe_read_mmd_regs_v2(struct xgbe_prv_data *pdata, int prtad,
 	unsigned long flags;
 	unsigned int mmd_address, index, offset;
 	int mmd_data;
+	unsigned short val=0;
+	struct pci_dev *rdev;
 
 	if (mmd_reg & MII_ADDR_C45)
 		mmd_address = mmd_reg & ~MII_ADDR_C45;
@@ -1175,11 +1178,33 @@ static int xgbe_read_mmd_regs_v2(struct xgbe_prv_data *pdata, int prtad,
 	index = mmd_address & ~pdata->xpcs_window_mask;
 	offset = pdata->xpcs_window + (mmd_address & pdata->xpcs_window_mask);
 
+	if (pdata->vdata->is_crater) {
+		rdev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(0, 0));
+		if (!rdev)
+			return 0;
+	}
+
 	spin_lock_irqsave(&pdata->xpcs_lock, flags);
-	XPCS32_IOWRITE(pdata, pdata->xpcs_window_sel_reg, index);
-	mmd_data = XPCS16_IOREAD(pdata, offset);
+	if (pdata->vdata->is_crater) {
+		pci_user_write_config_dword(rdev, 0x60, (pdata->xphy_base + pdata->xpcs_window_sel_reg));
+		pci_user_write_config_dword(rdev, 0x64, index);
+		pci_user_write_config_dword(rdev, 0x60, pdata->xphy_base + offset);
+		pci_user_read_config_dword(rdev, 0x64, &mmd_data);
+	} else {
+		XPCS32_IOWRITE(pdata, pdata->xpcs_window_sel_reg, index);
+		mmd_data = XPCS16_IOREAD(pdata, offset);
+	}
 	spin_unlock_irqrestore(&pdata->xpcs_lock, flags);
 
+	if (pdata->vdata->is_crater) {
+		pci_dev_put(rdev);
+		if (offset % 4)
+			val = (mmd_data >> 16) & 0xFFFF;
+		else
+			val = mmd_data  & 0xFFFF;
+
+		mmd_data = val;
+	}
 	return mmd_data;
 }
 
@@ -1188,6 +1213,9 @@ static void xgbe_write_mmd_regs_v2(struct xgbe_prv_data *pdata, int prtad,
 {
 	unsigned long flags;
 	unsigned int mmd_address, index, offset;
+	unsigned int val;
+	unsigned int tmp_mmd_data;
+	struct pci_dev *rdev;
 
 	if (mmd_reg & MII_ADDR_C45)
 		mmd_address = mmd_reg & ~MII_ADDR_C45;
@@ -1207,9 +1235,41 @@ static void xgbe_write_mmd_regs_v2(struct xgbe_prv_data *pdata, int prtad,
 	index = mmd_address & ~pdata->xpcs_window_mask;
 	offset = pdata->xpcs_window + (mmd_address & pdata->xpcs_window_mask);
 
+	if (pdata->vdata->is_crater) {
+		rdev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(0, 0));
+		if (!rdev)
+			return;
+	}
+
 	spin_lock_irqsave(&pdata->xpcs_lock, flags);
-	XPCS32_IOWRITE(pdata, pdata->xpcs_window_sel_reg, index);
-	XPCS16_IOWRITE(pdata, offset, mmd_data);
+	if (pdata->vdata->is_crater) {
+		pci_user_write_config_dword(rdev, 0x60, (pdata->xphy_base + pdata->xpcs_window_sel_reg));
+		pci_user_write_config_dword(rdev, 0x64, index);
+
+		pci_user_write_config_dword(rdev, 0x60, pdata->xphy_base + offset);
+		pci_user_read_config_dword(rdev, 0x64, &tmp_mmd_data);
+
+		if(offset%4) {
+			tmp_mmd_data &= ~0xFFFF0000;
+			tmp_mmd_data |=  (mmd_data << 16);
+		} else {
+
+			tmp_mmd_data &= ~0x0000FFFF;
+			tmp_mmd_data |=  (mmd_data );
+		}
+
+		val = tmp_mmd_data;
+
+		pci_user_write_config_dword(rdev, 0x60, (pdata->xphy_base + pdata->xpcs_window_sel_reg));
+		pci_user_write_config_dword(rdev, 0x64, index);
+
+		pci_user_write_config_dword(rdev, 0x60, (pdata->xphy_base + offset));
+		pci_user_write_config_dword(rdev, 0x64, tmp_mmd_data);
+		pci_dev_put(rdev);
+	} else {
+		XPCS32_IOWRITE(pdata, pdata->xpcs_window_sel_reg, index);
+		XPCS16_IOWRITE(pdata, offset, mmd_data);
+	}
 	spin_unlock_irqrestore(&pdata->xpcs_lock, flags);
 }
 
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c b/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
index 86834d65867d..16031c50d69c 100755
--- a/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-mdio.c
@@ -181,16 +181,19 @@ static void xgbe_an37_enable_interrupts(struct xgbe_prv_data *pdata)
 
 static void xgbe_an73_clear_interrupts(struct xgbe_prv_data *pdata)
 {
+
 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INT, 0);
 }
 
 static void xgbe_an73_disable_interrupts(struct xgbe_prv_data *pdata)
 {
+
 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK, 0);
 }
 
 static void xgbe_an73_enable_interrupts(struct xgbe_prv_data *pdata)
 {
+
 	XMDIO_WRITE(pdata, MDIO_MMD_AN, MDIO_AN_INTMASK, XGBE_AN_CL73_INT_MASK);
 }
 
@@ -484,7 +487,9 @@ static void xgbe_an_disable(struct xgbe_prv_data *pdata)
 
 static void xgbe_an_disable_all(struct xgbe_prv_data *pdata)
 {
-	xgbe_an73_disable(pdata);
+
+		xgbe_an73_disable(pdata);
+
 	xgbe_an37_disable(pdata);
 }
 
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe-pci.c b/drivers/net/ethernet/amd/xgbe/xgbe-pci.c
old mode 100644
new mode 100755
index a84b5581913c..dfe042ceb32e
--- a/drivers/net/ethernet/amd/xgbe/xgbe-pci.c
+++ b/drivers/net/ethernet/amd/xgbe/xgbe-pci.c
@@ -279,7 +279,7 @@ static int xgbe_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		pdata->xpcs_window_def_reg = PCS_V2_RV_WINDOW_DEF;
 		pdata->xpcs_window_sel_reg = PCS_V2_RV_WINDOW_SELECT;
 	} else if (rdev && (rdev->vendor == PCI_VENDOR_ID_AMD) &&
-		   (rdev->device == 0x14b5)) {
+		   ((rdev->device == 0x14b5) || (rdev->device == 0x1630))) {
 		pdata->xpcs_window_def_reg = PCS_V2_YC_WINDOW_DEF;
 		pdata->xpcs_window_sel_reg = PCS_V2_YC_WINDOW_SELECT;
 
@@ -288,8 +288,16 @@ static int xgbe_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 
 		/* Yellow Carp devices do not need rrc */
 		pdata->vdata->enable_rrc = 0;
-		pdata->vdata->is_yc = 1;
-		dev_dbg(dev, "Disabling the RRC on Yellow carp devices\n");
+		if(rdev->device == 0x14b5) {
+			pdata->vdata->is_yc = 1;
+			dev_dbg(dev, "Disabling the RRC on Yellow carp devices\n");
+		}
+		if(rdev->device == 0x1630) {
+			dev_dbg(dev, "Disabling the RRC on V2000 devices\n");
+			pdata->xpcs_window_def_reg = 0xF8078;
+			pdata->xpcs_window_sel_reg = 0xF807c;
+			pdata->vdata->is_crater = 1;
+		}
 	} else {
 		pdata->xpcs_window_def_reg = PCS_V2_WINDOW_DEF;
 		pdata->xpcs_window_sel_reg = PCS_V2_WINDOW_SELECT;
@@ -297,23 +305,25 @@ static int xgbe_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	pci_dev_put(rdev);
 
 	/* Configure the PCS indirect addressing support */
-	reg = XPCS32_IOREAD(pdata, pdata->xpcs_window_def_reg);
-	pdata->xpcs_window = XPCS_GET_BITS(reg, PCS_V2_WINDOW_DEF, OFFSET);
-	pdata->xpcs_window <<= 6;
-	pdata->xpcs_window_size = XPCS_GET_BITS(reg, PCS_V2_WINDOW_DEF, SIZE);
-	pdata->xpcs_window_size = 1 << (pdata->xpcs_window_size + 7);
-	pdata->xpcs_window_mask = pdata->xpcs_window_size - 1;
-	if (netif_msg_probe(pdata)) {
-		dev_dbg(dev, "xpcs window def  = %#010x\n",
-			pdata->xpcs_window_def_reg);
-		dev_dbg(dev, "xpcs window sel  = %#010x\n",
-			pdata->xpcs_window_sel_reg);
-		dev_dbg(dev, "xpcs window      = %#010x\n",
-			pdata->xpcs_window);
-		dev_dbg(dev, "xpcs window size = %#010x\n",
-			pdata->xpcs_window_size);
-		dev_dbg(dev, "xpcs window mask = %#010x\n",
-			pdata->xpcs_window_mask);
+	if (!pdata->vdata->is_crater) {
+		reg = XPCS32_IOREAD(pdata, pdata->xpcs_window_def_reg);
+		pdata->xpcs_window = XPCS_GET_BITS(reg, PCS_V2_WINDOW_DEF, OFFSET);
+		pdata->xpcs_window <<= 6;
+		pdata->xpcs_window_size = XPCS_GET_BITS(reg, PCS_V2_WINDOW_DEF, SIZE);
+		pdata->xpcs_window_size = 1 << (pdata->xpcs_window_size + 7);
+		pdata->xpcs_window_mask = pdata->xpcs_window_size - 1;
+		if (netif_msg_probe(pdata)) {
+			dev_dbg(dev, "xpcs window def  = %#010x\n",
+				pdata->xpcs_window_def_reg);
+			dev_dbg(dev, "xpcs window sel  = %#010x\n",
+				pdata->xpcs_window_sel_reg);
+			dev_dbg(dev, "xpcs window      = %#010x\n",
+				pdata->xpcs_window);
+			dev_dbg(dev, "xpcs window size = %#010x\n",
+				pdata->xpcs_window_size);
+			dev_dbg(dev, "xpcs window mask = %#010x\n",
+				pdata->xpcs_window_mask);
+		}
 	}
 
 	pci_set_master(pdev);
@@ -362,6 +372,39 @@ static int xgbe_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	}
 
 
+	if (pdata->vdata->is_crater) {
+		rdev = pci_get_domain_bus_and_slot(0, 0, PCI_DEVFN(0, 0));
+		pdata->xphy_base = 0x11e00000 + (0x100000 * XP_GET_BITS(pdata->pp0, XP_PROP_0, PORT_ID));
+		if (netif_msg_probe(pdata)) {
+			dev_dbg(dev, "xphy_dev  = %p\n", rdev);
+			dev_dbg(dev, "xphy_base = %08x\n", pdata->xphy_base);
+		}
+
+	/* Configure the PCS indirect addressing support */
+
+		pci_user_write_config_dword(rdev, 0x60, pdata->xphy_base + (pdata->xpcs_window_def_reg));
+		pci_user_read_config_dword(rdev, 0x64, &reg);
+		pci_dev_put(rdev);
+
+		pdata->xpcs_window = XPCS_GET_BITS(reg, PCS_V2_WINDOW_DEF, OFFSET);
+		pdata->xpcs_window <<= 6;
+		pdata->xpcs_window_size = XPCS_GET_BITS(reg, PCS_V2_WINDOW_DEF, SIZE);
+		pdata->xpcs_window_size = 1 << (pdata->xpcs_window_size + 7);
+		pdata->xpcs_window_mask = pdata->xpcs_window_size - 1;
+		if (netif_msg_probe(pdata)) {
+			dev_dbg(dev, "xpcs window def  = %#010x\n",
+				pdata->xpcs_window_def_reg);
+			dev_dbg(dev, "xpcs window sel  = %#010x\n",
+				pdata->xpcs_window_sel_reg);
+			dev_dbg(dev, "xpcs window	   = %#010x\n",
+				pdata->xpcs_window);
+			dev_dbg(dev, "xpcs window size = %#010x\n",
+				pdata->xpcs_window_size);
+			dev_dbg(dev, "xpcs window mask = %#010x\n",
+				pdata->xpcs_window_mask);
+		}
+	}
+
 	/* Set the maximum channels and queues */
 	pdata->tx_max_channel_count = XP_GET_BITS(pdata->pp1, XP_PROP_1,
 						  MAX_TX_DMA);
@@ -515,6 +558,8 @@ static const struct pci_device_id xgbe_pci_table[] = {
 	  .driver_data = (kernel_ulong_t)&xgbe_v2a },
 	{ PCI_VDEVICE(AMD, 0x1459),
 	  .driver_data = (kernel_ulong_t)&xgbe_v2b },
+	{ PCI_VDEVICE(AMD, 0x1641),
+		.driver_data = (kernel_ulong_t)&xgbe_v2b },
 	/* Last entry must be zero */
 	{ 0, }
 };
diff --git a/drivers/net/ethernet/amd/xgbe/xgbe.h b/drivers/net/ethernet/amd/xgbe/xgbe.h
index 1b84a7c6fe03..0cfbe760144e 100755
--- a/drivers/net/ethernet/amd/xgbe/xgbe.h
+++ b/drivers/net/ethernet/amd/xgbe/xgbe.h
@@ -1059,6 +1059,7 @@ struct xgbe_version_data {
 	unsigned int an_cdr_workaround;
 	unsigned int enable_rrc;
 	unsigned int is_yc;
+	unsigned int is_crater;
 };
 
 struct xgbe_prv_data {
@@ -1069,6 +1070,7 @@ struct xgbe_prv_data {
 	struct device *dev;
 	struct platform_device *phy_platdev;
 	struct device *phy_dev;
+	unsigned int xphy_base;
 
 	/* Version related data */
 	struct xgbe_version_data *vdata;
-- 
2.34.1

